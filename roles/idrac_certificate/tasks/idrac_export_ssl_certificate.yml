---

- ansible.builtin.assert:
    that:
      - ssl_cert_type in (ssl_cert_type_allowable_values.keys()|list)
    fail_msg: "Invalid value {{ ssl_cert_type }} for argument 'ssl_cert_type'. Valid values are {{ ssl_cert_type_allowable_values.keys()|list }}."
  tags:
    - "{{ command }}"

- name: export SSL certificate for iDRAC9
  ansible.builtin.uri:
    url: "https://{{ idrac_ip }}/redfish/v1/Dell/Managers/iDRAC.Embedded.1/DelliDRACCardService/Actions/DelliDRACCardService.ExportSSLCertificate"
    validate_certs: no
    method: POST
    user: "{{ idrac_user }}"
    password: "{{ idrac_password }}"
    headers:
      Accept: "application/json"
      Content-Type: "application/json"
      OData-Version: "4.0"
    body:
      SSLCertType: "{{ ssl_cert_type }}"
    body_format: "json"
    status_code: 200
    return_content: yes
  register: result
  when: idrac_firmware_version is version('3.30', '>')
  delegate_to: localhost
  tags:
    - "{{ command }}"

- name: parse the export SSL certificate response for iDRAC9
  ansible.builtin.set_fact:
    exportsslcert_response: "{{ result.json }}"
  when: idrac_firmware_version is version('3.30', '>')
  tags:
    - "{{ command }}"

- name: export SSL certificate for iDRAC7/8
  block:
    - name: export SSL certificate for iDRAC7/8
      ansible.builtin.uri:
        url: "https://{{ idrac_ip }}:{{ idrac_https_port }}/wsman"
        validate_certs: no
        method: POST
        user: "{{ idrac_user }}"
        password: "{{ idrac_password }}"
        headers:
          Content-Type: "application/xml"
        body: "{{ lookup('ansible.builtin.template', 'idrac_export_ssl_certificate_template.j2') }}"
        status_code: 200
        return_content: yes
      register: wsman_envelope
      delegate_to: localhost

    - name: parse the export SSL certificate response for iDRAC7/8
      ansible.builtin.set_fact:
        exportsslcert_response: "{{ exportsslcert_response | default({}) | combine({ item.key : item.value }, recursive=true) }}"
      with_dict:
        Message: "{{ wsman_envelope.content | trim | regex_findall('(?<=<n1:Message>).*(?=<\/n1:Message>)') | first }}"
        MessageID: "{{ wsman_envelope.content | trim | regex_findall('(?<=<n1:MessageID>).*(?=<\/n1:MessageID>)') | first }}"
        ReturnValue: "{{ wsman_envelope.content | trim | regex_findall('(?<=<n1:ReturnValue>).*(?=<\/n1:ReturnValue>)') | first }}"

    - name: add message argument to the response if unsuccessful
      ansible.builtin.set_fact:
        exportsslcert_response: "{{ exportsslcert_response | combine({ item.key : item.value }, recursive=true) }}"
      with_dict:
        MessageArguments: "{{ wsman_envelope.content | trim | regex_findall('(?<=<n1:MessageArguments>).*(?=<\/n1:MessageArguments>)') | first }}"
      when: wsman_envelope.content is search(".*<n1:ReturnValue>2</n1:ReturnValue>.*")

    - name: fail if export ssl certificate response is unsuccessful
      ansible.builtin.fail:
        msg:
          - "Export SSL Certificate request failed!"
          - "{{ exportsslcert_response }}"
      when: wsman_envelope.content is search(".*<n1:ReturnValue>2</n1:ReturnValue>.*")

    - name: get the certificate file content from the response
      ansible.builtin.set_fact:
        exportsslcert_response: "{{ exportsslcert_response | combine({ item.key: item.value }, recursive=true) }}"
      with_dict:
        CertificateFile: "{{ wsman_envelope.content | trim | regex_findall('(?<=<n1:CertificateFile>)[\\s\\S]*(?=<\/n1:CertificateFile>)') | first }}"
      when: wsman_envelope.content is search(".*<n1:ReturnValue>0</n1:ReturnValue>.*")

  when: idrac_firmware_version is version('3.30', '<')
  tags:
    - "{{ command }}"

- name: "copy SSL certificate content to the file {{ ssl_cert_file }}"
  ansible.builtin.copy:
    content: "{{ exportsslcert_response.CertificateFile }}"
    dest: "{{ ssl_cert_file }}"
  delegate_to: localhost
  tags:
    - "{{ command }}"
