---

- name: send generate csr request
  ansible.builtin.uri:
    url: "https://{{ idrac_ip }}:{{ idrac_https_port }}/wsman"
    validate_certs: no
    method: POST
    user: "{{ idrac_user }}"
    password: "{{ idrac_password }}"
    headers:
      Content-Type: "application/xml"
    body: "{{ lookup('ansible.builtin.template', 'idrac_generate_ssl_csr_template.j2') }}"
    status_code: 200
    return_content: yes
  register: wsman_envelope
  delegate_to: localhost
  tags:
    - "{{ command }}"

- name: parse generate csr response
  ansible.builtin.set_fact:
    generatesslcsr_response: "{{ generatesslcsr_response | default({}) | combine({ item.key : item.value }, recursive=true) }}"
  with_dict:
    Message: "{{ wsman_envelope.content | trim | regex_findall('(?<=<n1:Message>).*(?=<\/n1:Message>)') | first }}"
    MessageID: "{{ wsman_envelope.content | trim | regex_findall('(?<=<n1:MessageID>).*(?=<\/n1:MessageID>)') | first }}"
    ReturnValue: "{{ wsman_envelope.content | trim | regex_findall('(?<=<n1:ReturnValue>).*(?=<\/n1:ReturnValue>)') | first }}"
  tags:
    - "{{ command }}"

- name: add message argument to the response if unsuccessful
  ansible.builtin.set_fact:
    generatesslcsr_response: "{{ generatesslcsr_response | combine({ item.key: item.value }, recursive=true ) }}"
  with_dict:
    MessageArguments: "{{ wsman_envelope.content | trim | regex_findall('(?<=<n1:MessageArguments>).*(?=<\/n1:MessageArguments>)') | first }}"
  when: wsman_envelope.content is search(".*<n1:ReturnValue>2</n1:ReturnValue>.*")
  tags:
    - "{{ command }}"

- name: Fail if generate csr response is unsuccessful
  ansible.builtin.fail:
    msg:
      - "Generate CSR request failed!"
      - "{{ generatesslcsr_response }}"
  when: wsman_envelope.content is search(".*<n1:ReturnValue>2</n1:ReturnValue>.*")
  tags:
    - "{{ command }}"

- name: add the base64 encoded string of csr contents to the response
  ansible.builtin.set_fact:
    generatesslcsr_response: "{{ generatesslcsr_response | combine({ item.key : item.value }, recursive=true) }}"
  with_dict:
    SSLCSRFile: "{{ wsman_envelope.content | trim | regex_findall('(?<=<n1:SSLCSRFile>)[\\s\\S]*(?=<\/n1:SSLCSRFile>)') | first }}"
  when: wsman_envelope.content is search(".*<n1:ReturnValue>0</n1:ReturnValue>.*")
  tags:
    - "{{ command }}"

- name: Print the generate csr response if successful
  ansible.builtin.debug:
    msg:
      - "Generate CSR request successful!"
      - "{{ generatesslcsr_response }}"
  when: wsman_envelope.content is search(".*<n1:ReturnValue>0</n1:ReturnValue>.*")
  tags:
    - "{{ command }}"

- name: Copy the csr content to a file
  ansible.builtin.copy:
    content: "{{ generatesslcsr_response.SSLCSRFile }}"
    dest: "{{ csr_file }}"
  when:
    - wsman_envelope.content is search(".*<n1:ReturnValue>0</n1:ReturnValue>.*")
    - csr_file
  delegate_to: localhost
  tags:
    - "{{ command }}"
