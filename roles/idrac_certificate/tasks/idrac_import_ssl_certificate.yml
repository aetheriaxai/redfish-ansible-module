---

- ansible.builtin.assert:
    that:
      - ssl_cert_type in (ssl_cert_type_allowable_values.keys()|list)
    fail_msg: "Invalid value {{ ssl_cert_type }} for argument 'ssl_cert_type'. Valid values are {{ ssl_cert_type_allowable_values.keys()|list }}."
  tags:
    - "{{ command }}"

- ansible.builtin.assert:
    that:
      - ssl_cert_file is exists
    fail_msg: "{{ ssl_cert_file }} does not exist"
  tags:
    - "{{ command }}"

- name: import SSL certificate for iDRAC9
  ansible.builtin.uri:
    url: "https://{{ idrac_ip }}/redfish/v1/Dell/Managers/iDRAC.Embedded.1/DelliDRACCardService/Actions/DelliDRACCardService.ImportSSLCertificate"
    validate_certs: no
    method: POST
    user: "{{ idrac_user }}"
    password: "{{ idrac_password }}"
    headers:
      Accept: "application/json"
      Content-Type: "application/json"
      OData-Version: "4.0"
    body:
      CertificateType: "{{ ssl_cert_type }}"
      SSLCertificateFile: "{{ ssl_cert_file }}"
    body_format: "json"
    status_code: 200
    force_basic_auth: no
  register: result
  when: idrac_firmware_version is version('3.30', '>')
  changed_when: import_ssl_response.status == 200
  tags:
    - "{{ command }}"

- name: parse the import SSL certificate response for iDRAC9
  ansible.builtin.set_fact:
    importsslcert_response: "{{ result.json }}"
  when: idrac_firmware_version is version('3.30', '>')
  tags:
    - "{{ command }}"

- name: import SSL certificate for iDRAC7/8
  block:
    - name: import SSL certificate for iDRAC7/8
      ansible.builtin.uri:
        url: "https://{{ idrac_ip }}:{{ idrac_https_port }}/wsman"
        validate_certs: no
        method: POST
        user: "{{ idrac_user }}"
        password: "{{ idrac_password }}"
        headers:
          Content-Type: "application/xml"
        body: "{{ lookup('ansible.builtin.template', 'idrac_import_ssl_certificate_template.j2') }}"
        status_code: 200
        return_content: yes
      register: wsman_envelope
      delegate_to: localhost

    - name: parse the export SSL certificate response for iDRAC7/8
      ansible.builtin.set_fact:
        importsslcert_response: "{{ importsslcert_response | default({}) | combine({ item.key : item.value }, recursive=true) }}"
      with_dict:
        Message: "{{ wsman_envelope.content | trim | regex_findall('(?<=<n1:Message>).*(?=<\/n1:Message>)') | first }}"
        MessageID: "{{ wsman_envelope.content | trim | regex_findall('(?<=<n1:MessageID>).*(?=<\/n1:MessageID>)') | first }}"
        ReturnValue: "{{ wsman_envelope.content | trim | regex_findall('(?<=<n1:ReturnValue>).*(?=<\/n1:ReturnValue>)') | first }}"

    - name: add message argument if import ssl certificate response is unsuccessful
      ansible.builtin.set_fact:
        importsslcert_response: "{{ importsslcert_response | combine({ item.key : item.value }, recursive=true) }}"
      with_dict:
        MessageArguments: "{{ wsman_envelope.content | trim | regex_findall('(?<=<n1:MessageArguments>).*(?=<\/n1:MessageArguments>)') | first }}"
      when: wsman_envelope.content is search(".*<n1:ReturnValue>2</n1:ReturnValue>.*")

    - name: fail if import ssl certificate response is unsuccessful
      ansible.builtin.fail:
        msg:
          - "Import SSL Certificate request failed!"
          - "{{ importsslcert_response }}"
      when: wsman_envelope.content is search(".*<n1:ReturnValue>2</n1:ReturnValue>.*")

  when: idrac_firmware_version is version('3.30', '<')
  tags:
    - "{{ command }}"

- name: print the import ssl certificate response
  ansible.builtin.debug:
    var: importsslcert_response
  tags:
    - "{{ command }}"
