---

- name: "Urlencode the filter string"
  ansible.builtin.set_fact:
    group_name_filter_urlencoded: "{{ _filter_string | urlencode }}"
  vars:
    _filter_string: "Name eq '{{ ome_group_name }}'"

- name: "Get info for the group {{ ome_group_name }}"
  ansible.builtin.uri:
    url: "https://{{ ome_hostname }}/api/GroupService/Groups?$filter={{ group_name_filter_urlencoded }}"
    user: "{{ ome_username }}"
    password: "{{ ome_password }}"
    method: GET
    headers:
      Accept: "application/json"
    validate_certs: "{{ validate_certs }}"
    force_basic_auth: "{{ force_basic_auth }}"
  delegate_to: localhost
  register: ome_group_info

- name: "Fail if group {{ ome_group_name }} does not exist"
  ansible.builtin.fail:
    msg: "Failed to find a device group with name {{ ome_group_name }}"
  when: ome_group_info.json['@odata.count'] == 0

- name: "Extract the group ID for the group {{ ome_group_name }}"
  ansible.builtin.set_fact:
    ome_group_id: "{{ ome_group_info.json.value | json_query(_query) }}"
  vars:
    _query: "[?Name == '{{ ome_group_name }}'].Id"

- name: "Get list of all the devices in the group {{ ome_group_name }}"
  ansible.builtin.uri:
    url: "https://{{ ome_hostname }}/api/GroupService/Groups({{ ome_group_id[0] }})/AllLeafDevices"
    user: "{{ ome_username }}"
    password: "{{ ome_password }}"
    headers:
      Accept: "application/json"
    validate_certs: "{{ validate_certs }}"
    force_basic_auth: "{{ force_basic_auth }}"
  delegate_to: localhost
  register: ome_device_info

- name: "Do nothing if no devices are present in the group {{ ome_group_name }}"
  ansible.builtin.debug:
    msg: "No devices are present in the group {{ ome_group_name }}"
  when:
    - ome_device_info.json['@odata.count'] == 0

- block:
    - name: "Extract the device information for the group {{ ome_group_name }}"
      ansible.builtin.set_fact:
        targets: "{{ ome_device_info.json.value | community.general.json_query(_query) }}"
      vars:
        _query: "[].{ Id: Id, Data: '', TargetType: {Id: Type, Name: 'DEVICE' } }"

    - name: "Submit an inventory task job for the group {{ ome_group_name }}"
      ansible.builtin.uri:
        url: "https://{{ ome_hostname }}/api/JobService/Jobs"
        user: "{{ ome_username }}"
        password: "{{ ome_password }}"
        method: POST
        headers:
          Accept: "application/json"
          Content-Type: "application/json"
        body:
          JobName: "Inventory Task for group {{ ome_group_name }}"
          JobDescription: "Inventory Task for group {{ ome_group_name }}"
          Schedule: "{{ ome_device_inv_task_schedule_default }}"
          State: "{{ ome_device_inv_task_state_default }}"
          JobType:
            Id: 8
            Name: "Inventory_Task"
          Targets:
            - Id: "{{ ome_group_id[0] | int }}"
              Data: ""
              TargetType:
                Id: 6000
                Name: "GROUP"
        body_format: json
        validate_certs: "{{ validate_certs }}"
        force_basic_auth: "{{ force_basic_auth }}"
        status_code: [201]
      delegate_to: localhost
      register: ome_device_inv_task_response

    - name: "Poll the inventory task status till completion or failure"
      dellemc.openmanage.ome_job_info:
        hostname: "{{ ome_hostname }}"
        username: "{{ ome_username }}"
        password: "{{ ome_password }}"
        job_id: "{{ ome_device_inv_task_response.json.Id }}"
      register: ome_job_info_response
      until: >-
        ome_job_info_response['job_info']['LastRunStatus']['Name'] == 'Completed'or
        ome_job_info_response['job_info']['LastRunStatus']['Name'] == 'Failed' or
        ome_job_info_response['job_info']['LastRunStatus']['Name'] == 'Warning'
      retries: "{{ ome_device_inv_task_poll_retries_default }}"
      delay: "{{ ome_device_inv_task_poll_delay_default }}"
      #failed_when: ome_job_info_response['job_info']['LastRunStatus']['Name'] == 'Failed'
      delegate_to: localhost
      when:
        - not ome_device_inv_task_response.failed

    - name: "Fail the play if inventory task failed for group {{ ome_group_name }}"
      ansible.builtin.fail:
        msg: "Inventory task (Id: {{ ome_device_inv_task_response.json.Id }}) failed for group {{ ome_group_name }}"
      when:
        - ome_job_info_response['job_info']['LastRunStatus']['Name'] == 'Failed' or
          ome_job_info_response['job_info']['LastRunStatus']['Name'] == 'Warning'
        - not ome_job_info_response.failed

    - ansible.builtin.debug:
        msg: "Inventory task (Id: {{ ome_device_inv_task_response.json.Id }}) finished successfully for group {{ ome_group_name }}"
      when:
        - ome_job_info_response['job_info']['LastRunStatus']['Name'] == 'Completed'
        - not ome_job_info_response.failed

  when:
    - ome_device_info.json['@odata.count'] > 0
