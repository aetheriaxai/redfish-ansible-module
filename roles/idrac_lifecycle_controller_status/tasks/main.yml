---
# tasks file for idrac_lifecycle_controller_status

- name: get the manager firmware version
  ansible.builtin.uri:
    url: "https://{{ idrac_ip }}/redfish/v1/Managers/iDRAC.Embedded.1"
    user: "{{ idrac_user }}"
    password: "{{ idrac_password }}"
    method: GET
    headers:
      Accept: "application/json"
      OData-Version: "4.0"
    force_basic_auth: no
    validate_certs: no
  register: result

- name: get the manager firmware version
  ansible.builtin.set_fact:
    idrac_firmware_version: "{{ result.json.FirmwareVersion }}"

- name: get lifecycle controller status for idrac7/8
  block:
    - name: get lifecycle controller status for idrac7/8
      ansible.builtin.uri:
        url: "https://{{ idrac_ip }}:{{ idrac_https_port }}/wsman"
        validate_certs: no
        method: POST
        user: "{{ idrac_user }}"
        password: "{{ idrac_password }}"
        headers:
          Content-Type: "application/xml"
        body: "{{ lookup('ansible.builtin.template', 'idrac_lifecycle_controller_status.j2') }}"
        status_code: 200
        return_content: yes
      register: wsman_envelope

    - name: parse lifecycle controller status response
      ansible.builtin.set_fact:
        idrac_lc_status: "{{ idrac_lc_status | default({}) | combine({ item.key: GetRemoteServicesAPIStatus_Code[item.key][item.value] }) }}"
      with_dict:
        LCStatus: "{{ wsman_envelope.content | trim | regex_findall('(?<=<n1:LCStatus>).*(?=<\/n1:LCStatus>)') | first }}"
        RTStatus: "{{ wsman_envelope.content | trim | regex_findall('(?<=<n1:RTStatus>).*(?=<\/n1:RTStatus>)') | first }}"
        ServerStatus: "{{ wsman_envelope.content | trim | regex_findall('(?<=<n1:ServerStatus>).*(?=<\/n1:ServerStatus>)') | first }}"
        Status: "{{ wsman_envelope.content | trim | regex_findall('(?<=<n1:Status>).*(?=<\/n1:Status>)') | first }}"
      when: wsman_envelope.content is search(".*<n1:ReturnValue>0</n1:ReturnValue>.*")

    - ansible.builtin.fail:
        msg: "Failed to get lifecycle controller status!"
      when: wsman_envelope.content is search(".*<n1:ReturnValue>2</n1:ReturnValue>.*")

  when:
    - idrac_firmware_version is version('3.0', '<')

- name: get lifecycle controller status for iDRAC9
  block:
    - name: get lifecycle controller status for iDRAC9
      ansible.builtin.uri:
        url: "https://{{ idrac_ip }}/redfish/v1/Dell/Managers/iDRAC.Embedded.1/DellLCService/Actions/DellLCService.GetRemoteServicesAPIStatus"
        validate_certs: no
        user: "{{ idrac_user }}"
        password: "{{ idrac_password }}"
        method: POST
        headers:
          Accept: "application/json"
          Content-Type: "application/json"
          OData-Version: "4.0"
        body: "{}"
        body_format: "json"
        status_code: 200
        force_basic_auth: no
      register: result

    - name: parse lifecycle controller status response
      ansible.builtin.set_fact:
        idrac_lc_status:
          LCStatus: "{{ result.json.LCStatus }}"
          RTStatus: "{{ result.json.RTStatus }}"
          ServerStatus: "{{ result.json.ServerStatus }}"
          Status: "{{ result.json.Status }}"

  when:
    - idrac_firmware_version is version('3.0', '>=')
