---
- name: get the manager firmware version
  ansible.builtin.uri:
    url: "https://{{ idrac_ip }}/redfish/v1/Managers/iDRAC.Embedded.1"
    user: "{{ idrac_user }}"
    password: "{{ idrac_password }}"
    method: GET
    headers:
      Accept: "application/json"
      OData-Version: "4.0"
    force_basic_auth: no
    validate_certs: no
  register: result

- name: get the manager firmware version
  ansible.builtin.set_fact:
    idrac_firmware_version: "{{ result.json.FirmwareVersion }}"

- name: get the job queue size
  ansible.builtin.uri:
    url: "https://{{ idrac_ip }}/redfish/v1/Managers/iDRAC.Embedded.1/Jobs"
    user: "{{ idrac_user }}"
    password: "{{ idrac_password }}"
    method: GET
    headers:
      Accept: "application/json"
      OData-Version: "4.0"
    force_basic_auth: no
    validate_certs: no
  register: job_queue

- name: check if job queue is empty
  ansible.builtin.debug:
    msg: "iDRAC job queue is already empty"
  when: job_queue.json['Members@odata.count'] == 0

- name: delete job queue for iDRAC 7/8
  block:
    - name: delete job queue for iDRAC 7/8
      ansible.builtin.uri:
        url: "https://{{ idrac_ip }}:{{ idrac_https_port }}/wsman"
        validate_certs: no
        method: POST
        user: "{{ idrac_user }}"
        password: "{{ idrac_password }}"
        headers:
          Content-Type: "application/xml"
        body: "{{ lookup('template', 'idrac_delete_job_queue.j2') }}"
        status_code: 200
        return_content: yes
      register: wsman_envelope
      changed_when: wsman_envelope.content is search(".*<n1:MessageID>SUP020</n1:MessageID>.*")
      when: (command|lower) == 'deletejobqueue'

    - name: force delete job queue for iDRAC 7/8
      ansible.builtin.uri:
        url: "https://{{ idrac_ip }}:{{ idrac_https_port }}/wsman"
        validate_certs: no
        method: POST
        user: "{{ idrac_user }}"
        password: "{{ idrac_password }}"
        headers:
          Content-Type: "application/xml"
        body: "{{ lookup('template', 'idrac_delete_job_queue_force.j2') }}"
        status_code: 200
        return_content: yes
      register: wsman_envelope
      changed_when: wsman_envelope.content is search(".*<n1:MessageID>SUP020</n1:MessageID>.*")
      when: (command|lower) == 'deletejobqueueforce'

    - ansible.builtin.debug:
        msg: "Successfully deleted the job queue"
      when: wsman_envelope.content is search(".*<n1:MessageID>SUP020</n1:MessageID>.*")

    - ansible.builtin.fail:
        msg: "Failed to delete the job queue"
      when: wsman_envelope.content is not search(".*<n1:MessageID>SUP020</n1:MessageID>.*")

  when:
    - idrac_firmware_version is version('3.0', '<')
    - job_queue.json['Members@odata.count'] > 0

- name: delete job queue for iDRAC9 and above
  block:
    - name: delete job queue for iDRAC9 and above
      ansible.builtin.uri:
        url: "https://{{ idrac_ip }}/redfish/v1/Dell/Managers/iDRAC.Embedded.1/DellJobService/Actions/DellJobService.DeleteJobQueue"
        validate_certs: no
        user: "{{ idrac_user }}"
        password: "{{ idrac_password }}"
        method: POST
        headers:
          Accept: "application/json"
          Content-Type: "application/json"
          OData-Version: "4.0"
        body:
          "JobID": "JID_CLEARALL"
        body_format: "json"
        status_code: 200
        force_basic_auth: no
      register: delete_job_queue_response
      changed_when: delete_job_queue_response.status == 200
      when:
        - (command|lower) == "deletejobqueue"

    - name: delete job queue response
      ansible.builtin.debug:
        var: delete_job_queue_response.json
      when:
        - (command|lower) == "deletejobqueue"

    - name: force delete job queue force for iDRAC9 and above
      ansible.builtin.uri:
        url: "https://{{ idrac_ip }}/redfish/v1/Dell/Managers/iDRAC.Embedded.1/DellJobService/Actions/DellJobService.DeleteJobQueue"
        validate_certs: no
        user: "{{ idrac_user }}"
        password: "{{ idrac_password }}"
        method: POST
        headers:
          Accept: "application/json"
          Content-Type: "application/json"
          OData-Version: "4.0"
        body:
          "JobID": "JID_CLEARALL_FORCE"
        body_format: "json"
        status_code: 200
        force_basic_auth: no
      register: delete_job_queue_response
      changed_when: delete_job_queue_response.status == 200
      when:
        - (command|lower) == "deletejobqueueforce"

    - name: delete job queue response
      ansible.builtin.debug:
        var: delete_job_queue_response.json
      when:
        - (command|lower) == "deletejobqueueforce"

  when:
    - idrac_firmware_version is version('3.0', '>=')
    - job_queue.json['Members@odata.count'] > 0
